#![no_main]

sp1_zkvm::entrypoint!(main);

use substrate_bn::Fq;

fn print_fq(f: &Fq, s: &str) {
    println!("{}", s);
    let mut slice = [0u8; 32];
    f.to_big_endian(&mut slice).unwrap();
    println!("{:?}", slice);
}

pub fn main() {
    let xx = [
        [
            28, 93, 138, 153, 154, 167, 24, 70, 40, 156, 146, 100, 252, 194, 113, 94, 242, 21, 120,
            191, 124, 112, 58, 35, 33, 69, 153, 51, 183, 36, 254, 234,
        ],
        [
            19, 19, 13, 74, 229, 224, 7, 185, 87, 3, 91, 250, 59, 56, 191, 220, 97, 118, 121, 193,
            6, 206, 96, 161, 64, 167, 145, 1, 142, 54, 126, 34,
        ],
        [
            38, 246, 215, 2, 71, 8, 20, 101, 117, 25, 2, 55, 64, 114, 100, 51, 87, 231, 223, 148,
            50, 102, 164, 68, 154, 13, 80, 201, 140, 59, 175, 168,
        ],
        [
            6, 140, 93, 31, 11, 122, 5, 75, 18, 162, 32, 76, 61, 78, 199, 232, 177, 81, 123, 67,
            64, 106, 192, 132, 100, 169, 232, 58, 127, 75, 187, 86,
        ],
        [
            47, 114, 32, 156, 202, 16, 162, 134, 227, 129, 204, 7, 125, 194, 176, 116, 249, 124,
            88, 96, 156, 91, 101, 95, 115, 203, 91, 32, 42, 95, 130, 253,
        ],
        [
            15, 34, 208, 15, 40, 82, 32, 150, 76, 228, 42, 92, 243, 255, 38, 161, 124, 243, 115,
            250, 240, 255, 246, 110, 168, 179, 74, 104, 192, 194, 196, 140,
        ],
        [
            24, 142, 55, 64, 98, 93, 226, 228, 7, 145, 165, 203, 211, 176, 101, 66, 52, 214, 91,
            195, 238, 76, 112, 99, 66, 106, 239, 184, 134, 129, 204, 97,
        ],
        [
            7, 63, 163, 115, 216, 107, 230, 1, 20, 109, 67, 253, 27, 210, 175, 48, 122, 112, 100,
            225, 236, 95, 96, 192, 24, 220, 172, 38, 49, 65, 27, 99,
        ],
        [
            4, 134, 4, 1, 18, 109, 211, 115, 184, 230, 75, 21, 169, 169, 24, 64, 183, 121, 57, 128,
            61, 84, 201, 22, 141, 159, 112, 152, 133, 230, 197, 58,
        ],
        [
            3, 72, 13, 77, 176, 7, 205, 117, 234, 17, 47, 103, 248, 206, 64, 110, 216, 126, 99,
            202, 167, 224, 237, 96, 81, 19, 157, 126, 45, 85, 70, 54,
        ],
        [
            21, 101, 249, 219, 232, 113, 113, 194, 113, 225, 247, 26, 21, 106, 234, 225, 9, 110,
            199, 55, 77, 140, 47, 108, 60, 1, 74, 152, 142, 67, 31, 26,
        ],
        [
            10, 108, 201, 20, 21, 38, 111, 52, 207, 29, 172, 253, 158, 78, 242, 80, 85, 14, 125,
            212, 16, 95, 234, 208, 228, 114, 227, 46, 120, 224, 210, 30,
        ],
        [
            26, 199, 242, 140, 9, 51, 54, 86, 28, 101, 50, 30, 227, 185, 221, 31, 126, 7, 125, 23,
            72, 186, 99, 131, 131, 253, 47, 113, 29, 106, 49, 240,
        ],
        [
            9, 105, 18, 28, 73, 106, 119, 242, 187, 66, 97, 34, 59, 68, 168, 196, 157, 145, 99, 22,
            216, 11, 200, 167, 22, 59, 109, 156, 42, 246, 140, 61,
        ],
        [
            33, 84, 113, 187, 71, 100, 222, 33, 103, 98, 181, 41, 17, 46, 146, 9, 83, 166, 39, 242,
            22, 48, 205, 15, 231, 104, 119, 207, 134, 7, 227, 78,
        ],
        [
            0, 122, 121, 50, 122, 10, 147, 51, 79, 95, 183, 89, 183, 193, 138, 62, 77, 167, 53,
            240, 80, 141, 191, 95, 230, 12, 252, 152, 153, 150, 42, 131,
        ],
        [
            17, 18, 94, 123, 218, 131, 151, 121, 108, 18, 136, 75, 131, 150, 244, 131, 117, 143,
            158, 243, 108, 197, 79, 14, 77, 56, 65, 18, 36, 63, 222, 67,
        ],
        [
            28, 86, 120, 3, 112, 61, 242, 74, 37, 87, 101, 115, 114, 50, 79, 126, 175, 123, 138,
            223, 184, 147, 8, 146, 151, 129, 244, 182, 103, 74, 48, 1,
        ],
        [
            35, 126, 64, 208, 122, 135, 141, 74, 171, 206, 98, 251, 203, 77, 212, 113, 76, 185,
            136, 212, 249, 210, 176, 180, 213, 70, 119, 90, 65, 24, 44, 101,
        ],
        [
            33, 26, 217, 10, 245, 76, 14, 24, 167, 125, 154, 22, 22, 153, 59, 158, 14, 33, 247, 30,
            250, 203, 73, 38, 1, 19, 170, 220, 121, 15, 180, 217,
        ],
        [
            46, 36, 223, 26, 147, 171, 182, 169, 67, 107, 96, 68, 197, 162, 147, 159, 195, 203, 40,
            132, 190, 129, 157, 159, 58, 90, 170, 217, 100, 195, 252, 133,
        ],
        [
            25, 225, 90, 76, 247, 133, 92, 199, 200, 176, 55, 43, 76, 70, 136, 145, 155, 19, 32,
            50, 161, 25, 57, 14, 17, 88, 254, 164, 245, 253, 24, 253,
        ],
        [
            30, 38, 147, 208, 129, 162, 28, 191, 200, 39, 79, 209, 100, 227, 243, 31, 135, 104,
            218, 54, 165, 76, 103, 104, 167, 78, 100, 84, 170, 135, 131, 22,
        ],
        [
            45, 220, 180, 17, 160, 10, 39, 193, 94, 251, 143, 144, 30, 23, 158, 224, 176, 186, 36,
            45, 46, 220, 107, 242, 167, 19, 54, 249, 64, 188, 55, 72,
        ],
        [
            25, 168, 149, 179, 162, 43, 207, 109, 94, 21, 27, 191, 73, 160, 217, 74, 149, 34, 253,
            184, 120, 229, 69, 228, 35, 5, 152, 188, 148, 137, 147, 0,
        ],
        [
            22, 94, 207, 98, 146, 101, 212, 96, 95, 81, 184, 101, 101, 197, 112, 47, 118, 216, 247,
            21, 115, 213, 90, 218, 9, 47, 9, 199, 254, 182, 179, 133,
        ],
        [
            27, 231, 30, 242, 95, 98, 132, 180, 204, 102, 197, 60, 176, 36, 204, 157, 25, 42, 18,
            68, 131, 167, 216, 55, 88, 1, 10, 45, 98, 58, 126, 183,
        ],
        [
            11, 120, 147, 27, 145, 125, 50, 178, 192, 161, 192, 114, 51, 254, 46, 114, 123, 18,
            205, 68, 7, 108, 219, 182, 148, 168, 95, 176, 1, 77, 190, 37,
        ],
        [
            6, 152, 217, 95, 70, 140, 8, 159, 145, 126, 184, 176, 217, 77, 241, 14, 244, 3, 127,
            62, 181, 107, 141, 100, 221, 159, 154, 77, 237, 188, 54, 111,
        ],
        [
            28, 39, 6, 204, 95, 128, 93, 199, 8, 99, 59, 146, 115, 203, 47, 218, 92, 41, 176, 189,
            62, 175, 7, 188, 71, 74, 252, 242, 202, 128, 23, 230,
        ],
    ];

    let yy = [
        [
            18, 234, 178, 44, 136, 204, 130, 2, 203, 29, 159, 120, 139, 132, 75, 181, 208, 26, 80,
            243, 62, 201, 242, 27, 181, 144, 21, 71, 123, 104, 211, 53,
        ],
        [
            21, 22, 136, 198, 87, 116, 132, 220, 127, 65, 4, 191, 153, 45, 244, 143, 73, 73, 1, 14,
            22, 211, 44, 95, 85, 157, 139, 238, 197, 211, 91, 232,
        ],
        [
            47, 98, 50, 12, 140, 138, 161, 9, 86, 156, 148, 80, 231, 79, 184, 251, 42, 128, 81, 82,
            120, 26, 218, 240, 17, 166, 84, 220, 64, 97, 207, 232,
        ],
        [
            17, 82, 192, 54, 231, 15, 208, 223, 83, 43, 72, 223, 153, 73, 222, 122, 123, 234, 239,
            89, 152, 96, 187, 85, 218, 231, 221, 105, 31, 26, 30, 251,
        ],
        [
            21, 8, 104, 163, 80, 80, 12, 113, 132, 108, 16, 222, 84, 164, 181, 198, 75, 163, 111,
            159, 250, 146, 6, 252, 169, 237, 182, 203, 253, 12, 229, 33,
        ],
        [
            8, 222, 39, 132, 81, 172, 79, 76, 44, 157, 25, 96, 233, 68, 195, 213, 195, 54, 198,
            185, 183, 189, 49, 174, 224, 22, 107, 134, 17, 161, 138, 182,
        ],
        [
            36, 219, 152, 134, 20, 32, 76, 6, 43, 35, 96, 134, 113, 183, 187, 62, 59, 189, 140, 60,
            140, 14, 24, 150, 167, 152, 123, 47, 152, 187, 109, 105,
        ],
        [
            20, 0, 98, 223, 101, 90, 218, 0, 22, 64, 209, 126, 164, 108, 251, 135, 137, 186, 222,
            41, 160, 170, 68, 221, 205, 247, 89, 218, 197, 129, 135, 232,
        ],
        [
            41, 140, 186, 197, 245, 129, 219, 45, 209, 122, 95, 29, 95, 94, 146, 152, 23, 141, 93,
            52, 204, 210, 193, 165, 13, 129, 59, 224, 51, 48, 164, 158,
        ],
        [
            33, 110, 200, 130, 1, 212, 107, 172, 198, 162, 250, 10, 212, 199, 53, 16, 71, 176, 243,
            85, 47, 41, 93, 48, 55, 230, 128, 58, 177, 175, 5, 56,
        ],
        [
            40, 161, 247, 236, 100, 2, 173, 18, 86, 42, 239, 255, 35, 68, 248, 76, 189, 121, 177,
            175, 197, 71, 123, 132, 201, 167, 116, 228, 154, 202, 225, 191,
        ],
        [
            5, 4, 34, 214, 249, 76, 162, 60, 158, 165, 117, 89, 138, 197, 8, 168, 116, 107, 10,
            156, 75, 97, 90, 221, 30, 174, 233, 59, 22, 214, 17, 85,
        ],
        [
            14, 254, 49, 166, 249, 173, 203, 81, 42, 234, 153, 199, 184, 100, 90, 10, 100, 188,
            196, 173, 170, 12, 17, 135, 41, 177, 223, 48, 171, 168, 84, 241,
        ],
        [
            19, 142, 25, 242, 211, 11, 91, 99, 197, 140, 104, 129, 64, 79, 172, 167, 186, 253, 245,
            116, 159, 6, 4, 99, 198, 236, 152, 122, 250, 201, 116, 90,
        ],
        [
            24, 4, 36, 10, 36, 201, 191, 9, 120, 172, 165, 98, 71, 57, 222, 10, 139, 167, 43, 41,
            195, 170, 42, 63, 19, 166, 238, 147, 23, 101, 138, 47,
        ],
        [
            42, 224, 218, 55, 50, 75, 117, 132, 174, 103, 210, 72, 155, 207, 175, 89, 237, 60, 157,
            215, 151, 211, 119, 54, 93, 85, 18, 216, 165, 102, 213, 41,
        ],
        [
            40, 106, 162, 69, 40, 144, 133, 128, 163, 10, 205, 141, 188, 142, 234, 142, 93, 159,
            75, 137, 192, 206, 215, 244, 149, 232, 104, 68, 189, 88, 182, 85,
        ],
        [
            20, 118, 12, 157, 46, 25, 195, 147, 172, 231, 68, 8, 67, 109, 216, 131, 46, 81, 188,
            180, 51, 235, 35, 137, 183, 42, 18, 76, 45, 125, 202, 26,
        ],
        [
            22, 197, 23, 198, 214, 188, 232, 73, 156, 129, 32, 186, 60, 6, 185, 71, 154, 198, 91,
            10, 81, 165, 75, 214, 154, 101, 28, 217, 51, 174, 188, 205,
        ],
        [
            28, 118, 157, 239, 138, 79, 200, 165, 188, 35, 104, 230, 97, 219, 224, 125, 45, 7, 24,
            186, 160, 187, 74, 206, 249, 61, 57, 215, 150, 21, 170, 155,
        ],
        [
            21, 185, 146, 179, 246, 57, 235, 9, 122, 178, 125, 208, 145, 242, 181, 22, 129, 78, 87,
            243, 67, 147, 158, 201, 143, 255, 183, 214, 250, 87, 246, 230,
        ],
        [
            17, 93, 106, 121, 182, 172, 212, 190, 75, 196, 44, 80, 174, 95, 122, 195, 83, 0, 195,
            47, 166, 133, 208, 142, 177, 174, 223, 27, 31, 71, 206, 219,
        ],
        [
            38, 107, 196, 175, 73, 23, 57, 17, 134, 130, 44, 17, 81, 253, 234, 15, 98, 156, 144,
            209, 194, 96, 14, 85, 181, 181, 208, 190, 117, 166, 58, 64,
        ],
        [
            32, 220, 102, 114, 191, 176, 44, 245, 246, 237, 110, 80, 26, 16, 254, 176, 121, 62, 75,
            28, 246, 140, 137, 218, 245, 95, 77, 198, 136, 88, 69, 137,
        ],
        [
            24, 43, 185, 19, 9, 228, 15, 223, 238, 201, 37, 18, 101, 98, 168, 43, 141, 51, 56, 232,
            170, 55, 1, 140, 187, 123, 250, 97, 90, 122, 66, 175,
        ],
        [
            1, 125, 11, 241, 226, 183, 235, 73, 23, 170, 93, 50, 104, 179, 195, 150, 214, 175, 12,
            145, 99, 27, 235, 237, 232, 71, 34, 131, 169, 134, 120, 225,
        ],
        [
            19, 180, 131, 151, 67, 223, 17, 43, 219, 87, 128, 54, 144, 73, 40, 28, 79, 230, 226,
            43, 78, 78, 160, 53, 46, 136, 244, 22, 13, 27, 218, 50,
        ],
        [
            23, 31, 3, 202, 17, 186, 187, 57, 81, 142, 183, 41, 210, 227, 73, 203, 114, 225, 135,
            239, 104, 15, 222, 132, 44, 200, 157, 178, 56, 82, 68, 43,
        ],
        [
            33, 177, 203, 244, 147, 128, 155, 189, 249, 230, 149, 20, 241, 113, 93, 95, 80, 72, 12,
            55, 176, 236, 158, 109, 152, 210, 140, 130, 217, 243, 194, 43,
        ],
        [
            5, 157, 51, 114, 254, 214, 15, 13, 76, 250, 70, 14, 211, 233, 79, 37, 205, 211, 201,
            92, 3, 46, 2, 80, 120, 90, 134, 54, 160, 227, 51, 65,
        ],
    ];
    xx.iter().zip(yy.iter()).for_each(|(_x, _y)| {
        // Test Addition
        {
            let x = Fq::from_slice(_x).unwrap();
            let y = Fq::from_slice(_y).unwrap();

            let mut a = x.0 .0;
            let b = y.0 .0;

            let lhs = x + y;

            a.add(&b, &Fq::modulus());
            let rhs = Fq::from_u256(a).unwrap();

            assert_eq!(lhs, rhs);
            println!("Addition test passed!");
        }

        // Test Subtraction
        {
            let x = Fq::from_slice(_x).unwrap();
            let y = Fq::from_slice(_y).unwrap();

            print_fq(&x, "x");
            print_fq(&y, "y");
            let mut a = x.0 .0;
            let b = y.0 .0;

            let lhs = x - y;

            a.sub(&b, &Fq::modulus());
            let rhs = Fq::from_u256(a).unwrap();

            assert_eq!(lhs, rhs);
            println!("Subtraction test passed!");
        }

        // Test Multiplication
        {
            let x = Fq::from_slice(_x).unwrap();
            let y = Fq::from_slice(_y).unwrap();

            print_fq(&x, "x");
            print_fq(&y, "y");
            let mut a = x.0 .0;
            let b = y.0 .0;

            let lhs = x * y;

            a.mul(&b, &Fq::modulus());
            let rhs = Fq::from_u256(a).unwrap();

            assert_eq!(lhs, rhs);
            println!("Multiplication test passed!");
        }
    });
}
